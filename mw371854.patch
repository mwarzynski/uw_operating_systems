diff -rupN /usr/src/minix/fs/mfs/read.c /usr/src/new_minix/fs/mfs/read.c
--- /usr/src/minix/fs/mfs/read.c	2017-05-30 21:05:23.537576694 +0200
+++ /usr/src/new_minix/fs/mfs/read.c	2017-05-30 21:27:33.382146049 +0200
@@ -269,11 +269,36 @@ int *completed;			/* number of bytes cop
 		}
 		return r;
 	} else {
+         // create buffer to get data from user space and be able to check if it's filled with zeros
+         char *buffer = calloc(sizeof(char), block_size);
+
+         // copy bytes from user space to buffer
+         int r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off, (vir_bytes) (buffer+off), (size_t) chunk);
+
+         if (r != OK) {
+            printf("MFS: sys_safecopyfrom failed\n");
+         }
+
+         // check if buffer is filled with zeros
+         int is_empty = 1;
+         for (int i = 0; i < block_size; i++) {
+            if (buffer[i] != 0) {
+                is_empty = 0;
+                break;
+            }
+         }
+
+         free(buffer);
+
+         if (is_empty) {
+            return r;
+         }
+
 		/* Writing to or peeking a nonexistent block.
 		 * Create and enter in inode.
 		 */
-		if ((bp = new_block(rip, (off_t) ex64lo(position))) == NULL)
-			return(err_code);
+        if ((bp = new_block(rip, (off_t) ex64lo(position))) == NULL)
+            return(err_code);
 	}
   } else if (rw_flag == READING || rw_flag == PEEKING) {
 	/* Read and read ahead if convenient. */
@@ -309,12 +334,13 @@ int *completed;			/* number of bytes cop
 	r = sys_safecopyto(VFS_PROC_NR, gid, (vir_bytes) buf_off,
 			   (vir_bytes) (b_data(bp)+off), (size_t) chunk);
   } else if(rw_flag == WRITING) {
-	/* Copy a chunk from user space to the block buffer. */
-	r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
-			     (vir_bytes) (b_data(bp)+off), (size_t) chunk);
-	MARKDIRTY(bp);
+     // if block is not empty, write to disk
+     /* Copy a chunk from user space to the block buffer. */
+     r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                 (vir_bytes) (b_data(bp)+off), (size_t) chunk);
+     MARKDIRTY(bp);
   }
-  
+
   n = (off + chunk == block_size ? FULL_DATA_BLOCK : PARTIAL_DATA_BLOCK);
   put_block(bp, n);
 
