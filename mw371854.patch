diff -rupN minix/servers/sched/schedproc.h new/servers/sched/schedproc.h
--- minix/servers/sched/schedproc.h	2017-05-10 22:43:54.550594195 +0200
+++ new/servers/sched/schedproc.h	2017-05-15 22:11:56.529344676 +0200
@@ -15,6 +15,15 @@
 #define CONFIG_MAX_CPUS 1
 #endif
 
+// It should be named `SCHED_MAX_TOKENS`... but anyway, who cares.
+#ifndef MAX_TOKENS
+#define MAX_TOKENS 6
+#endif
+
+#ifndef SCHED_FACTOR
+#define SCHED_FACTOR 0.5
+#endif
+
 /**
  * We might later want to add more information to this table, such as the
  * process owner, process group or cpumask.
@@ -30,9 +39,11 @@ EXTERN struct schedproc {
 	unsigned priority;		/* the process' current priority */
 	unsigned time_slice;		/* this process's time slice */
 	unsigned cpu;		/* what CPU is the process running on */
-	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
-								process allowed
-								to run on */
+	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the process allowed to run on */
+
+    /* Tokens */
+    long tokens;        /* number of tokens */
+    clock_t tokens_updated; /* last sys time value when updated tokens for this process */
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupN minix/servers/sched/schedule.c new/servers/sched/schedule.c
--- minix/servers/sched/schedule.c	2017-05-10 22:43:54.566594426 +0200
+++ new/servers/sched/schedule.c	2017-05-15 22:11:56.529344676 +0200
@@ -17,6 +17,9 @@
 static minix_timer_t sched_timer;
 static unsigned balance_timeout;
 
+/* last_sys_time is used to evaluate how many tokens might be generated */
+static clock_t last_sys_time;
+
 #define BALANCE_TIMEOUT	5 /* how often to balance queues in seconds */
 
 static int schedule_process(struct schedproc * rmp, unsigned flags);
@@ -48,12 +51,71 @@ static void balance_queues(minix_timer_t
 
 static unsigned cpu_proc[CONFIG_MAX_CPUS];
 
+/*
+ * Evaluate number of tokens for proccess.
+ *
+ */
+static long generate_tokens() {
+    clock_t sys_time;
+    sys_times(0, NULL, NULL, &sys_time, NULL); // always succeeds
+
+    long diff = sys_time - last_sys_time;
+    last_sys_time = sys_time;
+
+    return diff*SCHED_FACTOR;
+}
+
+/*
+ * Compute how many tokens process used.
+ *
+ */
+static void p_used_tokens(struct schedproc *rmp) {
+    clock_t sys_time;
+    sys_times(rmp->endpoint, NULL, &sys_time, NULL, NULL); // always succeeds
+
+    rmp->tokens -= sys_time - rmp->tokens_updated;
+    rmp->tokens_updated = sys_time;
+}
+
+/*
+ * Distribute tokens over processes.
+ *
+ */
+static void distribute_tokens() {
+    static int next_process = 0;
+    int start_process = next_process;
+
+    long tokens = generate_tokens();
+
+    struct schedproc *rmp = schedproc + next_process;
+
+    while (tokens > 0) {
+        if (rmp->flags & IN_USE) {
+            long diff = MAX_TOKENS - rmp->tokens;
+            diff = tokens < diff ? tokens : diff;
+
+            tokens -= diff;
+            rmp->tokens += diff;
+        }
+
+        next_process++;
+        if (next_process == NR_PROCS)
+            next_process = 0;
+        rmp++;
+        if (rmp == schedproc + NR_PROCS)
+            rmp = schedproc;
+
+        if (next_process == start_process)
+            break;
+   }
+}
+
 static void pick_cpu(struct schedproc * proc)
 {
 #ifdef CONFIG_SMP
 	unsigned cpu, c;
 	unsigned cpu_load = (unsigned) -1;
-	
+
 	if (machine.processors_count == 1) {
 		proc->cpu = machine.bsp_id;
 		return;
@@ -99,6 +161,10 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
+
+    p_used_tokens(rmp);
+    distribute_tokens();
+
 	if (rmp->priority < MIN_USER_Q) {
 		rmp->priority += 1; /* lower priority */
 	}
@@ -144,9 +210,9 @@ int do_start_scheduling(message *m_ptr)
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n, parent_nr_n;
-	
+
 	/* we can handle two kinds of messages here */
-	assert(m_ptr->m_type == SCHEDULING_START || 
+	assert(m_ptr->m_type == SCHEDULING_START ||
 		m_ptr->m_type == SCHEDULING_INHERIT);
 
 	/* check who can send you requests */
@@ -168,6 +234,10 @@ int do_start_scheduling(message *m_ptr)
 		return EINVAL;
 	}
 
+    // Set token values
+    rmp->tokens = MAX_TOKENS;
+    sys_times(rmp->endpoint, NULL, &rmp->tokens_updated, NULL, NULL);
+
 	/* Inherit current priority and time slice from parent. Since there
 	 * is currently only one scheduler scheduling the whole system, this
 	 * value is local and we assert that the parent endpoint is valid */
@@ -188,17 +258,17 @@ int do_start_scheduling(message *m_ptr)
 		/* FIXME set the cpu mask */
 #endif
 	}
-	
+
 	switch (m_ptr->m_type) {
 
 	case SCHEDULING_START:
 		/* We have a special case here for system processes, for which
-		 * quanum and priority are set explicitly rather than inherited 
+		 * quanum and priority are set explicitly rather than inherited
 		 * from the parent */
 		rmp->priority   = rmp->max_priority;
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
 		break;
-		
+
 	case SCHEDULING_INHERIT:
 		/* Inherit current priority and time slice from parent. Since there
 		 * is currently only one scheduler scheduling the whole system, this
@@ -210,8 +280,8 @@ int do_start_scheduling(message *m_ptr)
 		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
-		
-	default: 
+
+	default:
 		/* not reachable */
 		assert(0);
 	}
@@ -299,7 +369,12 @@ int do_nice(message *m_ptr)
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
 {
-	int err;
+    if (rmp->tokens <= 0) {
+        // don't schedule processes with negative number of tokens
+        return OK;
+    }
+
+    int err;
 	int new_prio, new_quantum, new_cpu;
 
 	pick_cpu(rmp);
@@ -319,8 +394,8 @@ static int schedule_process(struct sched
 	else
 		new_cpu = -1;
 
-	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+
+	if ((err = sys_schedule(rmp->endpoint, new_prio, new_quantum, new_cpu)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -338,6 +413,7 @@ void init_scheduling(void)
 	balance_timeout = BALANCE_TIMEOUT * sys_hz();
 	init_timer(&sched_timer);
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+    sys_times(0, NULL, NULL, &last_sys_time, NULL); // always succeeds
 }
 
 /*===========================================================================*
@@ -351,9 +427,10 @@ void init_scheduling(void)
  */
 static void balance_queues(minix_timer_t *tp)
 {
-	struct schedproc *rmp;
-	int proc_nr;
+    distribute_tokens();
 
+    struct schedproc *rmp;
+    int proc_nr;
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
 		if (rmp->flags & IN_USE) {
 			if (rmp->priority > rmp->max_priority) {
@@ -362,6 +439,6 @@ static void balance_queues(minix_timer_t
 			}
 		}
 	}
-
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
